"use strict"; var csvImport = angular.module("ngCsvImport", []); csvImport.directive("ngCsvImport", function () { return { restrict: "E", transclude: !0, replace: !0, scope: { content: "=?", header: "=?", headerVisible: "=?", separator: "=?", separatorVisible: "=?", result: "=?", encoding: "=?", encodingVisible: "=?", accept: "=?" }, template: '<div><div ng-show="headerVisible"><div class="label">Header</div><input type="checkbox" ng-model="header"></div><div ng-show="encoding && encodingVisible"><div class="label">Encoding</div><span>{{encoding}}</span></div><div ng-show="separator && separatorVisible"><div class="label">Seperator</div><span><input class="separator-input" type="text" ng-change="changeSeparator" ng-model="separator"><span></div><div><span class="ms-btn ms-btn-primary" style="position:relative;margin-left: 13px;">Choose File...<input type="file" style="position:absolute;z-index:2;top:0;left:0;opacity:0;background-color:transparent;color:transparent;filter: alpha(opacity=0);-ms-filter:&quot;progid:DXImageTransform.Microsoft.Alpha(Opacity=0)&quot;;" accept="{{accept}}" /></span></div></div>', link: function (e, a) { e.separatorVisible = e.separatorVisible || !1, e.headerVisible = e.headerVisible || !1, angular.element(a[0].querySelector(".separator-input")).on("keyup", function (a) { if (null != e.content) { var r = { csv: e.content, header: e.header, separator: a.target.value, encoding: e.encoding }; e.result = t(r), e.$apply() } }), a.on("change", function (a) { var r = new FileReader, n = !0; if ("=?" != e.accept && "" != e.accept && "." + a.target.files[0].name.split(".")[a.target.files[0].name.split(".").length - 1].toLowerCase() != e.accept && (n = !1, alert("Please upload only CSV file.")), n) if (e.filename = a.target.files[0].name, r.onload = function (a) { e.$apply(function () { var r = { csv: a.target.result.replace(/\r\n|\r/g, "\n"), header: e.header, separator: e.separator }; e.content = r.csv, e.result = t(r), e.result.filename = e.filename }) }, "file" !== a.target.type || null == a.target.files && null == a.srcElement.files) { if (null != e.content) { var i = { csv: e.content, header: !e.header, separator: e.separator }; e.result = t(i) } } else r.readAsText((a.srcElement || a.target).files[0], e.encoding) }); var t = function (e) { var a = e.csv.split("\n"), t = [], r = 0, n = a[0].split(e.separator).length, i = []; e.header && (i = a[0].split(e.separator), r = 1); for (var l = r; l < a.length; l++) { var s = {}, o = a[l].split(new RegExp(e.separator + '(?![^"]*"(?:(?:[^"]*"){2})*[^"]*$)')); if (o.length === n) { if (e.header) for (var c = 0; c < i.length; c++) s[i[c]] = o[c]; else for (var p = 0; p < o.length; p++) s[p] = o[p]; t.push(s) } } return t } } } });