<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ include file="..\\Templates\\Context.Base.ttinclude"#>
<#@ output extension=".cs"#><#

const string _inputFile = @"..\..\CollectorsClub.EntityFramework\Model.edmx";
var _storeMetadata = LoadMetadata(_inputFile);
var _textTransform = DynamicTextTransformation.Create(this);
var _code = new CodeGenerationTools(this);
var _ef = new MetadataTools(this);
//var _itemCollection = new EdmMetadataLoader(_textTransform.Host, _textTransform.Errors).CreateEdmItemCollection(_inputFile);
var _itemCollection = _storeMetadata.EdmItems;
EntityContainer _container = _itemCollection.OfType<EntityContainer>().FirstOrDefault();
var _typeMapper = new TypeMapper(_code, _ef, _container, _storeMetadata, _textTransform.Errors);
var	_fileManager = EntityFrameworkTemplateFileManager.Create(this);
var _codeStringGenerator = new CodeStringGenerator(_code, _typeMapper, _ef);

if (!_typeMapper.VerifyCaseInsensitiveTypeUniqueness(_typeMapper.GetAllGlobalItems(_itemCollection), _inputFile)) {
	return string.Empty;
}

WriteHeader(_codeStringGenerator, _fileManager);

foreach (var _entity in _typeMapper.GetItemsToGenerate<EntityType>(_itemCollection)) {
    //_fileManager.StartNewFile("\\..\\Entities\\" + _entity.Name + ".cs");
    _fileManager.StartNewFile(_entity.Name + ".cs"); #>
<#=_codeStringGenerator.UsingDirectives(inHeader: false) #>
<# BeginNamespace(_code, "Entities"); #>
<#=_codeStringGenerator.EntityClassOpening(_entity)#> {
<#
    var propertiesWithDefaultValues = _typeMapper.GetPropertiesWithDefaultValues(_entity);
    var collectionNavigationProperties = _typeMapper.GetCollectionNavigationProperties(_entity);
    var complexProperties = _typeMapper.GetComplexProperties(_entity);

    if (propertiesWithDefaultValues.Any() || collectionNavigationProperties.Any() || complexProperties.Any()) { #>
  public <#=_code.Escape(_entity)#>() {
<#
        foreach (var edmProperty in propertiesWithDefaultValues) {
#>
		this.<#=_code.Escape(edmProperty)#> = <#=_typeMapper.CreateLiteral(edmProperty.DefaultValue)#>;
<#      }

        foreach (var navigationProperty in collectionNavigationProperties) { #>
		this.<#=_code.Escape(navigationProperty)#> = new HashSet<<#=_typeMapper.GetTypeName(navigationProperty.ToEndMember.GetEntityType())#>>();
<#      }

        foreach (var complexProperty in complexProperties) { #>
		this.<#=_code.Escape(complexProperty)#> = new <#=_typeMapper.GetTypeName(complexProperty.TypeUsage)#>();
<#
        }
#>
  }

<#  }

    var simpleProperties = _typeMapper.GetSimpleProperties(_entity);
    if (simpleProperties.Any()) {
        foreach (var edmProperty in simpleProperties) { #>
	<#=_codeStringGenerator.Property(edmProperty) #>
<#      }
    }

    if (complexProperties.Any()) { 
        foreach(var complexProperty in complexProperties) { #>
  <#=_codeStringGenerator.Property(complexProperty) #>
<#      }
    }

    IEnumerable<NavigationProperty> _navigationProperties = _typeMapper.GetNavigationProperties(_entity);
		foreach (NavigationProperty _property in _navigationProperties) {
			/*EdmType _relationshipType = _typeMapper.FromEntityType(_property);
			if (_relationshipType == _entity) { #>
	[JsonIgnore]
<#		}*/ #>
	<#=_codeStringGenerator.NavigationProperty(_property)#>
<#	} #>
}
<#  EndNamespace(_code);
}

foreach (var complex in _typeMapper.GetItemsToGenerate<ComplexType>(_itemCollection)) {
    _fileManager.StartNewFile(complex.Name + ".cs");
    BeginNamespace(_code, "Entities"); #>
<#=_codeStringGenerator.UsingDirectives(inHeader: false, includeCollections: false)#>
<#=Accessibility.ForType(complex)#> partial class <#=_code.Escape(complex)#>
{
<#  var complexProperties = _typeMapper.GetComplexProperties(complex);
    var propertiesWithDefaultValues = _typeMapper.GetPropertiesWithDefaultValues(complex);

    if (propertiesWithDefaultValues.Any() || complexProperties.Any()) { #>
    public <#=_code.Escape(complex)#>() {
<#      foreach (var edmProperty in propertiesWithDefaultValues) { #>
        this.<#=_code.Escape(edmProperty)#> = <#=_typeMapper.CreateLiteral(edmProperty.DefaultValue)#>;
<#      }

        foreach (var complexProperty in complexProperties) { #>
        this.<#=_code.Escape(complexProperty)#> = new <#=_typeMapper.GetTypeName(complexProperty.TypeUsage)#>();
<#			} #>
    }
<#  }

    var simpleProperties = _typeMapper.GetSimpleProperties(complex);
    if (simpleProperties.Any()) {
        foreach(var edmProperty in simpleProperties) { #>
	<#=_codeStringGenerator.Property(edmProperty) #>
<#      }
    }

    if (complexProperties.Any()) { 
        foreach(var edmProperty in complexProperties) { #>
	<#=_codeStringGenerator.Property(edmProperty) #>
<#      }
    } #>
}
<#
    EndNamespace(_code);
}

foreach (var enumType in _typeMapper.GetEnumItemsToGenerate(_itemCollection)) {
    _fileManager.StartNewFile(enumType.Name + ".cs");
    BeginNamespace(_code, "Entities"); #>
<#=_codeStringGenerator.UsingDirectives(inHeader: false, includeCollections: false)#>
<#  if (_typeMapper.EnumIsFlags(enumType)) { #>
[Flags]
<#  } #>
<#=_codeStringGenerator.EnumOpening(enumType)#> {
<#  var foundOne = false;
    
    foreach (MetadataItem member in _typeMapper.GetEnumMembers(enumType)) {
        foundOne = true; #>
    <#=_code.Escape(_typeMapper.GetEnumMemberName(member))#> = <#=_typeMapper.GetEnumMemberValue(member)#>,
<#   }

    if (foundOne) {
      this.GenerationEnvironment.Remove(this.GenerationEnvironment.Length - 3, 1);
    } #>
}
<#  EndNamespace(_code);
}

_fileManager.Process();
#>