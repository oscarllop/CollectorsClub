<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ include file="Templates\\Context.Base.ttinclude"#><#@ output extension=".cs"#><#

const string _inputFile = @"..\CollectorsClub.EntityFramework\Model.edmx";
var _storeMetadata = LoadMetadata(_inputFile);
var _textTransform = DynamicTextTransformation.Create(this);
var _code = new CodeGenerationTools(this);
var _ef = new MetadataTools(this);
//var _itemCollection = new EdmMetadataLoader(_textTransform.Host, _textTransform.Errors).CreateEdmItemCollection(_inputFile);
var _itemCollection = _storeMetadata.EdmItems;
EntityContainer _container = _itemCollection.OfType<EntityContainer>().FirstOrDefault();
var _typeMapper = new TypeMapper(_code, _ef, _container, _storeMetadata, _textTransform.Errors);
var loader = new EdmMetadataLoader(_textTransform.Host, _textTransform.Errors);
var modelNamespace = loader.GetModelNamespace(_inputFile);
var _codeStringGenerator = new CodeStringGenerator(_code, _typeMapper, _ef);

if (_container == null) {
    return string.Empty;
} #>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
<# if (_container.FunctionImports.Any()) { #>
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
<# } #>
using CollectorsClub.Model.Entities;
using CollectorsClub.Model.Configurations;

<#
var codeNamespace = _code.VsNamespaceSuggestion();
if (!String.IsNullOrEmpty(codeNamespace)) { #>
namespace <#=_code.EscapeNamespace(codeNamespace) #> { <#
	PushIndent("	");
} #>

<#=Accessibility.ForType(_container)#> partial class <#=_code.Escape(_container)#> : DbContext {
  public <#=_code.Escape(_container)#>() : base("name=<#=_container.Name#>") {
<# if (!loader.IsLazyLoadingEnabled(_container)) { #>
		this.Configuration.LazyLoadingEnabled = false;
<# } #>
		this.Configuration.ProxyCreationEnabled = false;
	}

  protected override void OnModelCreating(DbModelBuilder modelBuilder) {
		modelBuilder.Conventions.Remove<IncludeMetadataConvention>();
<# foreach (var _entity in _typeMapper.GetItemsToGenerate<EntityType>(_itemCollection)) { #>
		modelBuilder.Configurations.Add(new <#= _entity.Name #>Configuration());
<# } #>
	}

	public virtual void Commit() {
		base.SaveChanges();
	}

<# foreach (var entitySet in _container.BaseEntitySets.OfType<EntitySet>()) { #>
  <#=_codeStringGenerator.DbSet(entitySet)#>
<# }

  foreach (var edmFunction in _container.FunctionImports) {
		WriteFunctionImport(_typeMapper, _codeStringGenerator, edmFunction, modelNamespace, includeMergeOption: false);
  } #>
}
<# if (!String.IsNullOrEmpty(codeNamespace)) {
	PopIndent(); #>
}
<# } #>
<#+

private void WriteFunctionImport(TypeMapper _typeMapper, CodeStringGenerator _codeStringGenerator, EdmFunction edmFunction, string modelNamespace, bool includeMergeOption) {
  if (_typeMapper.IsComposable(edmFunction)) { #>

  [EdmFunction("<#=edmFunction.NamespaceName#>", "<#=edmFunction.Name#>")]
  <#=_codeStringGenerator.ComposableFunctionMethod(edmFunction, modelNamespace)#> { <#+
	  _codeStringGenerator.WriteFunctionParameters(edmFunction, WriteFunctionParameter); #>
		<#=_codeStringGenerator.ComposableCreateQuery(edmFunction, modelNamespace)#>
	}
<#+ } else { #>

  <#=_codeStringGenerator.FunctionMethod(edmFunction, modelNamespace, includeMergeOption)#> {
	<#+ _codeStringGenerator.WriteFunctionParameters(edmFunction, WriteFunctionParameter); #>
  <#=_codeStringGenerator.ExecuteFunction(edmFunction, modelNamespace, includeMergeOption) #>
  }
<#+
    if (_typeMapper.GenerateMergeOptionFunction(edmFunction, includeMergeOption)) {
			WriteFunctionImport(_typeMapper, _codeStringGenerator, edmFunction, modelNamespace, includeMergeOption: true);
    }
  }
}

public void WriteFunctionParameter(string name, string isNotNull, string notNullInit, string nullInit) { #>
  var <#=name#> = <#=isNotNull#> ? <#=notNullInit#> : <#=nullInit#>;
<#+ }
#>