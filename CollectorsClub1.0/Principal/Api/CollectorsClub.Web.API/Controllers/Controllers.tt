<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ import namespace="System.Linq" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ include file="..\\..\\CollectorsClub.Model\\Templates\\Context.Base.ttinclude"#>
<#@ output extension=".cs"#>
<#

const string _inputFile = @"..\..\CollectorsClub.EntityFramework\Model.edmx";
string _aplicacion = "CollectorsClub";
Dictionary<string, MetadataGenerador.MetadataEntidad> _metadataEntidades = MetadataGenerador.ObtenerEntidades(_aplicacion);
var _storeMetadata = LoadMetadata(_inputFile);
var _textTransform = DynamicTextTransformation.Create(this);
var _code = new CodeGenerationTools(this);
var _ef = new MetadataTools(this);
//var _itemCollection = new EdmMetadataLoader(_textTransform.Host, _textTransform.Errors).CreateEdmItemCollection(_inputFile);
var _itemCollection = _storeMetadata.EdmItems;
EntityContainer _container = _itemCollection.OfType<EntityContainer>().FirstOrDefault();
var _typeMapper = new TypeMapper(_code, _ef, _container, _storeMetadata, _textTransform.Errors);
var	_fileManager = EntityFrameworkTemplateFileManager.Create(this);
var _codeStringGenerator = new CodeStringGenerator(_code, _typeMapper, _ef);
 
if (!_typeMapper.VerifyCaseInsensitiveTypeUniqueness(_typeMapper.GetAllGlobalItems(_itemCollection), _inputFile)) {
	return string.Empty;
}

WriteHeader(_codeStringGenerator, _fileManager);

foreach (EntityType _entity in _typeMapper.GetItemsToGenerate<EntityType>(_itemCollection)) {
  _fileManager.StartNewFile(_entity.Name + "Controller.cs");
	IEnumerable<EdmProperty> _simpleProperties = _typeMapper.GetSimpleProperties(_entity);
	IEnumerable<EdmProperty> _keyProperties = _typeMapper.GetKeyProperties(_entity); 
#>
<#= _codeStringGenerator.UsingDirectives(inHeader: false, otherNamespaces: new string[] { "System.Data", "System.Data.SqlClient", "System.Dynamic", "System.Linq", "System.Net", "System.Net.Http", "System.Reflection", "System.Web.Http", "CollectorsClub.Data.Dispatcher", "CollectorsClub.Model", "CollectorsClub.Model.Commands", "CollectorsClub.Model.Entities", "CollectorsClub.Model.Repositories", "CollectorsClub.Web.API.App_Code", "CollectorsClub.Web.API.Models", "Core.Json", "log4net", "WebApi.OutputCache.V2" }) #>
<# BeginNamespace(_code, "Handlers"); #>

[Authorize]
<#= _codeStringGenerator.ClassOpening(_entity, "{2}Controller", "ApiController")#> {
	private readonly ICommandBus commandBus;
	private readonly I<#= _code.Escape(_entity) #>Repository <#= _code.Escape(_entity).ToLower() #>Repository;
<# if (_metadataEntidades[_entity.Name].Multiidioma) { #>
	private readonly I<#= _code.Escape(_entity) #>_IdiomaRepository <#= _code.Escape(_entity).ToLower() #>_IdiomaRepository;
<# } #>
  private static readonly ILog log = LogManager.GetLogger(MethodBase.GetCurrentMethod().DeclaringType);
	
	public <#= _code.Escape(_entity) #>Controller(ICommandBus commandBus, I<#= _code.Escape(_entity) #>Repository <#= _code.Escape(_entity).ToLower() #>Repository<#= (_metadataEntidades[_entity.Name].Multiidioma ? ", I" + _code.Escape(_entity) + "_IdiomaRepository " + _code.Escape(_entity).ToLower() + "_IdiomaRepository" : string.Empty) #>) {
		this.commandBus = commandBus;
		this.<#= _code.Escape(_entity).ToLower() #>Repository = <#= _code.Escape(_entity).ToLower() #>Repository;
<# if (_metadataEntidades[_entity.Name].Multiidioma) { #>
		this.<#= _code.Escape(_entity).ToLower() #>_IdiomaRepository = <#= _code.Escape(_entity).ToLower() #>_IdiomaRepository;
<# } #>
		log4net.Config.XmlConfigurator.Configure();
	}
	
	[Queryable]
	[CacheOutput(ClientTimeSpan = 100, ServerTimeSpan = 0)]
	public HttpResponseMessage Get([FromUri] string[] include, [FromUri] bool indent = false) {
		try {
			var formatter = new MaxDepthJsonMediaTypeFormatter() { Indent = indent };
			if (include.Length > 0) {
				formatter.SerializerSettings.MaxDepth = 100; //include.Max<string>(s => s.Split('.').Length * 5);
				formatter.SerializerSettings.PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.Objects;
			} else {
				formatter.SerializerSettings.MaxDepth = 1;
			}
			return Request.CreateResponse<IQueryable<<#= _code.Escape(_entity) #>>>(HttpStatusCode.OK, <#= _code.Escape(_entity).ToLower() #>Repository.GetAll(include).AsQueryable(), formatter);
		} catch (Exception _excepcion) {
			log.Error(_excepcion);
			return Request.CreateResponse(HttpStatusCode.InternalServerError, _excepcion);
		}
	}

	[HttpGet]
	[CacheOutput(ClientTimeSpan = 100, ServerTimeSpan = 0)]
	public HttpResponseMessage GetQuery([FromUri] string query, [FromUri] object[] parameter, [FromUri] bool indent = false, [FromUri] TiposRetorno tipoRetorno = TiposRetorno.Json) {
		try {
			var formatter = new MaxDepthJsonMediaTypeFormatter() { Indent = indent };
			formatter.SerializerSettings.MaxDepth = 1;
			List<dynamic> _listaResultados = CollectorsClubEntities.ExecuteCommand(query, Enumerable.Select(parameter, p => new SqlParameter("@" + p.ToString().Split('|')[0], (SqlDbType) Enum.Parse(typeof(SqlDbType), p.ToString().Split('|')[1], true)) { Size = (p.ToString().Split('|').Length > 3 && !string.IsNullOrEmpty(p.ToString().Split('|')[3]) ? int.Parse(p.ToString().Split('|')[3]) : 0), Value = ((p.ToString().Split('|')[2] != string.Empty ? p.ToString().Split('|')[2] : null) ?? (object) DBNull.Value) }).ToArray<SqlParameter>(), CommandType.StoredProcedure, ((<#= _code.Escape(_entity) #>Repository) <#= _code.Escape(_entity).ToLower() #>Repository).DataContext.Database.Connection.ConnectionString);
			if (_listaResultados == null) { _listaResultados = new List<dynamic>(); }
			switch (tipoRetorno) {
				case TiposRetorno.Json: return Request.CreateResponse(HttpStatusCode.OK, _listaResultados);
				case TiposRetorno.Excel: return Request.CreateResponse(HttpStatusCode.OK, Utilidades.GenerarExcel((IEnumerable<object>) _listaResultados));
			}
			return Request.CreateResponse(HttpStatusCode.InternalServerError, "No se ha podido efectuar acci√≥n");
		} catch (Exception _excepcion) {
			log.Error(_excepcion);
			return Request.CreateResponse(HttpStatusCode.InternalServerError, _excepcion);
		}
	}

<# if (!_metadataEntidades[_entity.Name].Multiidioma) { #>
<#	if (_keyProperties.Count() > 0) { #>
	[HttpGet]
	[CacheOutput(ClientTimeSpan = 100, ServerTimeSpan = 0)]
	public HttpResponseMessage Get([FromUri] <#= _codeStringGenerator.ConstructorParameters(_entity, _keyProperties) #>, [FromUri] string[] include, [FromUri] bool indent = false) {
		try {
			var formatter = new MaxDepthJsonMediaTypeFormatter() { Indent = indent };
			if (include.Length > 0) {
				formatter.SerializerSettings.MaxDepth = 100; //include.Max<string>(s => s.Split('.').Length * 5);
				formatter.SerializerSettings.PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.Objects;
			} else {
				formatter.SerializerSettings.MaxDepth = 1;
			}
			<#= _code.Escape(_entity) #> <#= _code.Escape(_entity).ToLower() #> = <#= _code.Escape(_entity).ToLower() #>Repository.GetById(include, (p => <#= _codeStringGenerator.CompareProperties(_keyProperties, string.Empty, "p", "&&", "==") #>));
			if (<#= _code.Escape(_entity).ToLower() #> == null) { throw new HttpResponseException(HttpStatusCode.NotFound); }
			return Request.CreateResponse<<#= _code.Escape(_entity) #>>(HttpStatusCode.OK, <#= _code.Escape(_entity).ToLower() #>, formatter);
		} catch (Exception _excepcion) {
			log.Error(_excepcion);
			return Request.CreateResponse(HttpStatusCode.InternalServerError, _excepcion);
		}
	}

<#	} #>
<# } #>
<#	if (_simpleProperties.Where(p => _code.Escape(p) == "IdMarca").Count() > 0) { #>
	[HttpGet]
	[CacheOutput(ClientTimeSpan = 100, ServerTimeSpan = 0)]
	public HttpResponseMessage GetPorMarca([FromUri] string idMarca, [FromUri] string[] include, [FromUri] bool indent = false) {
		try {
			var formatter = new MaxDepthJsonMediaTypeFormatter() { Indent = indent };
			if (include.Length > 0) {
				formatter.SerializerSettings.MaxDepth = 100; //include.Max<string>(s => s.Split('.').Length * 5);
				formatter.SerializerSettings.PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.Objects;
			} else {
				formatter.SerializerSettings.MaxDepth = 1;
			}
			return Request.CreateResponse<IQueryable<<#= _code.Escape(_entity) #>>>(HttpStatusCode.OK, <#= _code.Escape(_entity).ToLower() #>Repository.GetMany(include, r => r.IdMarca == idMarca).AsQueryable(), formatter);
		} catch (Exception _excepcion) {
			log.Error(_excepcion);
			return Request.CreateResponse(HttpStatusCode.InternalServerError, _excepcion);
		}
	}

<# } #>
<#	if (_keyProperties.Count() == 1) { #>
	[HttpGet]
	[CacheOutput(ClientTimeSpan = 100, ServerTimeSpan = 0)]
	public HttpResponseMessage GetList([FromUri] <#= _typeMapper.GetTypeName(_keyProperties.First().TypeUsage) #>[] id, [FromUri] string[] include, [FromUri] bool indent = false) {
		try {
			var formatter = new MaxDepthJsonMediaTypeFormatter() { Indent = indent };
			if (include.Length > 0) {
				formatter.SerializerSettings.MaxDepth = 100; //include.Max<string>(s => s.Split('.').Length * 5);
				formatter.SerializerSettings.PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.Objects;
			} else {
				formatter.SerializerSettings.MaxDepth = 1;
			}
			return Request.CreateResponse<IEnumerable<<#= _code.Escape(_entity) #>>>(HttpStatusCode.OK, <#= _code.Escape(_entity).ToLower() #>Repository.GetMany(include, (p => id.Contains(p.<#=_code.Escape(_keyProperties.First())#>))), formatter);
		} catch (Exception _excepcion) {
			log.Error(_excepcion);
			return Request.CreateResponse(HttpStatusCode.InternalServerError, _excepcion);
		}
	}

<# } #>
<#	if (_simpleProperties.Where(p => _code.Escape(p) == "Nombre" || _code.Escape(p) == "IdMarca").Count() == 2) { #>
	[HttpGet]
	[CacheOutput(ClientTimeSpan = 100, ServerTimeSpan = 0)]
	public HttpResponseMessage GetPorFiltros(string idMarca, string nombre, [FromUri] string[] include, [FromUri] bool indent = false) {
		try {
			var formatter = new MaxDepthJsonMediaTypeFormatter() { Indent = indent };
			if (include.Length > 0) {
				formatter.SerializerSettings.MaxDepth = 100; //include.Max<string>(s => s.Split('.').Length * 5);
				formatter.SerializerSettings.PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.Objects;
			} else {
				formatter.SerializerSettings.MaxDepth = 1;
			}
			return Request.CreateResponse<IQueryable<<#= _code.Escape(_entity) #>>>(HttpStatusCode.OK, <#= _code.Escape(_entity).ToLower() #>Repository.GetMany(r => r.IdMarca == idMarca && (nombre == null || r.Nombre.Contains(nombre))).AsQueryable(), formatter);
		} catch (Exception _excepcion) {
			log.Error(_excepcion);
			return Request.CreateResponse(HttpStatusCode.InternalServerError, _excepcion);
		}
	}

<# } #>
	[HttpGet]
	[CacheOutput(ClientTimeSpan = 100, ServerTimeSpan = 0)]
	public HttpResponseMessage Count() {
		try {
			return Request.CreateResponse(HttpStatusCode.OK, <#= _code.Escape(_entity).ToLower() #>Repository.Count());
		} catch (Exception _excepcion) {
			log.Error(_excepcion);
			return Request.CreateResponse(HttpStatusCode.InternalServerError, _excepcion);
		}
	}

	[HttpGet]
	public HttpResponseMessage Modificado([FromUri] DateTime ultimaActualizacion) {
		try {
			return Request.CreateResponse(HttpStatusCode.OK, false);
		} catch (Exception _excepcion) {
			log.Error(_excepcion);
			return Request.CreateResponse(HttpStatusCode.InternalServerError, _excepcion);
		}
	}

<# if (_keyProperties.Count() > 0) { #>
	[HttpGet]
	public HttpResponseMessage Modificado(<#= _codeStringGenerator.ConstructorParameters(_entity, _keyProperties) #>) {
		try {
			return Request.CreateResponse(HttpStatusCode.OK, false);
		} catch (Exception _excepcion) {
			log.Error(_excepcion);
			return Request.CreateResponse(HttpStatusCode.InternalServerError, _excepcion);
		}
	}
<# } #>

	[CacheOutput(ClientTimeSpan = 100, ServerTimeSpan = 0)]
	public HttpResponseMessage Options() {
		try {
			return Request.CreateResponse(HttpStatusCode.OK);
		} catch (Exception _excepcion) {
			log.Error(_excepcion);
			return Request.CreateResponse(HttpStatusCode.InternalServerError, _excepcion);
		}
	}

<# if (!_metadataEntidades[_entity.Name].Multiidioma) { #>
	public HttpResponseMessage Post(<#= _code.Escape(_entity) #>Model <#= _code.Escape(_entity).ToLower() #>) {
		try {
			if (ModelState.IsValid) {
<#	if (_keyProperties.Count() > 1 || (_keyProperties.Count() == 1 && !_typeMapper.IsGeneratedByStore(_keyProperties.First()))) { #>
				if (!<#= _code.Escape(_entity).ToLower() #>Repository.Exist(p => <#= _codeStringGenerator.CompareProperties(_keyProperties, _code.Escape(_entity).ToLower(), "p", "&&", "==") #>)) {
<#	} else { #>
				if (<# foreach (var edmProperty in _keyProperties) { #><# if (_keyProperties.FirstOrDefault() != edmProperty) { #> || <# } #><#=_codeStringGenerator.NewValueCondition(edmProperty, _code.Escape(_entity).ToLower())#><# } #>) {
<#	} #>
					var command = AutoMapper.Mapper.Map<<#= _code.Escape(_entity) #>Model, CreateOrUpdate<#= _code.Escape(_entity) #>Command>(<#= _code.Escape(_entity).ToLower() #>);
					var result = commandBus.Submit(command);
					if (result.Success) {
						<#= _code.Escape(_entity).ToLower() #> = AutoMapper.Mapper.Map<CreateOrUpdate<#= _code.Escape(_entity) #>Command, <#= _code.Escape(_entity) #>Model>(command);
						var response = Request.CreateResponse<<#= _code.Escape(_entity) #>Model>(HttpStatusCode.Created, <#= _code.Escape(_entity).ToLower() #>);
						string uri = Url.Route(null, new { <#= _codeStringGenerator.ObjectsAssign(_keyProperties, _code.Escape(_entity).ToLower(), string.Empty, false) #> });
						response.Headers.Location = new Uri(Request.RequestUri, uri);
						return response;
					}
				} else {
					return Request.CreateResponse(HttpStatusCode.BadRequest, "No se puede insertar el registro porque ya existe otro con la misma clave. Por favor, rev√≠sela.");
				}
			} else {
				var errors = new Dictionary<string, IEnumerable<string>>();
				foreach (var keyValue in ModelState) {
					errors[keyValue.Key] = keyValue.Value.Errors.Select(e => (!string.IsNullOrWhiteSpace(e.ErrorMessage) ? e.ErrorMessage : (e.Exception != null ? e.Exception.Message : string.Empty)));
				}
				return Request.CreateResponse(HttpStatusCode.BadRequest, errors);
			}
			throw new HttpResponseException(HttpStatusCode.BadRequest);
		} catch (Exception _excepcion) {
			log.Error(_excepcion);
			return Request.CreateResponse(HttpStatusCode.InternalServerError, _excepcion);
		}
	}

	public HttpResponseMessage Put(<#= _codeStringGenerator.ConstructorParameters(_entity, _keyProperties) #>, <#= _code.Escape(_entity) #>Model <#= _code.Escape(_entity).ToLower() #>) {
		try {
			if (ModelState.IsValid) {
				var command = AutoMapper.Mapper.Map<<#= _code.Escape(_entity) #>Model, CreateOrUpdate<#= _code.Escape(_entity) #>Command>(<#= _code.Escape(_entity).ToLower() #>);
				var result = commandBus.Submit(command);
				return Request.CreateResponse<<#= _code.Escape(_entity) #>Model>(HttpStatusCode.OK, <#= _code.Escape(_entity).ToLower() #>);
			} else {
				var errors = new Dictionary<string, IEnumerable<string>>();
				foreach (var keyValue in ModelState) {
						errors[keyValue.Key] = keyValue.Value.Errors.Select(e => (!string.IsNullOrWhiteSpace(e.ErrorMessage) ? e.ErrorMessage : (e.Exception != null ? e.Exception.Message : string.Empty)));
				}
				return Request.CreateResponse(HttpStatusCode.BadRequest, errors);
			}
			throw new HttpResponseException(HttpStatusCode.BadRequest);
		} catch (Exception _excepcion) {
			log.Error(_excepcion);
			return Request.CreateResponse(HttpStatusCode.InternalServerError, _excepcion);
		}
	}

<# } #>
	public HttpResponseMessage Delete(<#= _codeStringGenerator.ConstructorParameters(_entity, _keyProperties) #>) {
		try {
			var command = new Delete<#= _code.Escape(_entity) #>Command(<#= _codeStringGenerator.MethodParameters(_keyProperties, string.Empty) #>);
			var result = commandBus.Submit(command);
			if (!result.Success) { throw new HttpResponseException(HttpStatusCode.BadRequest); }
			return Request.CreateResponse(HttpStatusCode.OK);
		} catch (Exception _excepcion) {
			log.Error(_excepcion);
			return Request.CreateResponse(HttpStatusCode.InternalServerError, _excepcion);
		}
	}
	
	// Multiidioma
<# if (_metadataEntidades[_entity.Name].Multiidioma) { #>
<# if (_keyProperties.Count() > 0) { #>
	[HttpGet]
	[CacheOutput(ClientTimeSpan = 100, ServerTimeSpan = 0)]
	public HttpResponseMessage Get([FromUri] <#= _codeStringGenerator.ConstructorParameters(_entity, _keyProperties) #>, [FromUri] string cultura, [FromUri] string[] include, [FromUri] bool indent = false) {
		try {
			var formatter = new MaxDepthJsonMediaTypeFormatter() { Indent = indent };
			if (include.Length > 0) {
				formatter.SerializerSettings.MaxDepth = 100; //include.Max<string>(s => s.Split('.').Length * 5);
				formatter.SerializerSettings.PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.Objects;
			} else {
				formatter.SerializerSettings.MaxDepth = 1;
			}
			<#=_code.Escape(_entity) #> _<#=_code.Escape(_entity).ToLower() #> = <#=_code.Escape(_entity).ToLower() #>Repository.GetById(include, (p => <#= _codeStringGenerator.CompareProperties(_keyProperties, string.Empty, "p", "&&", "==") #>));
			if (cultura != Localizacion.CulturaPorDefecto) {
				<#=_code.Escape(_entity) #>_Idioma _<#=_code.Escape(_entity).ToLower() #>Idioma = <#=_code.Escape(_entity).ToLower() #>_IdiomaRepository.GetMany(p => p.IdRegistro == Id && p.Cultura == cultura).FirstOrDefault();

				// Campos multiidioma
				if (_<#=_code.Escape(_entity).ToLower() #>Idioma != null) {
<# foreach (EdmProperty _propiedad in _typeMapper.GetSimpleProperties(_typeMapper.GetItemsToGenerate<EntityType>(_itemCollection).Where(e => e.Name == _entity.Name + "_Idioma").First())) { 
		if (_propiedad.Name != "Id" && _propiedad.Name != "Cultura" && _propiedad.Name != "IdRegistro") { #>
					_<#=_code.Escape(_entity).ToLower() #>.<#= _propiedad.Name #> = _<#=_code.Escape(_entity).ToLower() #>Idioma.<#= _propiedad.Name #>;
<#	}
	 } #>
				}
			}

			if (_<#=_code.Escape(_entity).ToLower() #> == null) { throw new HttpResponseException(HttpStatusCode.NotFound); }
			return Request.CreateResponse<<#=_code.Escape(_entity) #>>(HttpStatusCode.OK, _<#=_code.Escape(_entity).ToLower() #>, formatter);
		} catch (Exception _excepcion) {
			log.Error(_excepcion);
			return Request.CreateResponse(HttpStatusCode.InternalServerError, _excepcion);
		}
	}
<#	} #>

	public HttpResponseMessage Post(string cultura, <#= _code.Escape(_entity) #>Model <#= _code.Escape(_entity).ToLower() #>) {
		try {
			if (ModelState.IsValid) {
<# if (_keyProperties.Count() > 1 || (_keyProperties.Count() == 1 && !_typeMapper.IsGeneratedByStore(_keyProperties.First()))) { #>
				if (!<#= _code.Escape(_entity).ToLower() #>Repository.Exist(p => <#= _codeStringGenerator.CompareProperties(_keyProperties, _code.Escape(_entity).ToLower(), "p", "&&", "==") #>)) {
<# } else { #>
				if (<# foreach (var edmProperty in _keyProperties) { #><# if (_keyProperties.FirstOrDefault() != edmProperty) { #> || <# } #><#=_codeStringGenerator.NewValueCondition(edmProperty, _code.Escape(_entity).ToLower())#><# } #>) {
<# } #>
					var command = AutoMapper.Mapper.Map<<#= _code.Escape(_entity) #>Model, CreateOrUpdate<#= _code.Escape(_entity) #>Command>(<#= _code.Escape(_entity).ToLower() #>);
					var result = commandBus.Submit(command);
					if (result.Success) {
						var commandIdioma = AutoMapper.Mapper.Map<<#= _code.Escape(_entity) #>_IdiomaModel, CreateOrUpdate<#= _code.Escape(_entity) #>_IdiomaCommand>(new <#= _code.Escape(_entity) #>_IdiomaModel { IdRegistro = command.Id, Cultura = cultura<# foreach (EdmProperty _propiedad in _typeMapper.GetSimpleProperties(_typeMapper.GetItemsToGenerate<EntityType>(_itemCollection).Where(e => e.Name == _entity.Name + "_Idioma").First())) {  if (_propiedad.Name != "Id" && _propiedad.Name != "Cultura" && _propiedad.Name != "IdRegistro") { #>, <#= _propiedad.Name #> = command.<#= _propiedad.Name #><# } } #> });
						var resultIdioma = commandBus.Submit(commandIdioma);
						if (resultIdioma.Success) {
							<#= _code.Escape(_entity).ToLower() #> = AutoMapper.Mapper.Map<CreateOrUpdate<#= _code.Escape(_entity) #>Command, <#= _code.Escape(_entity) #>Model>(command);
							var response = Request.CreateResponse<<#= _code.Escape(_entity) #>Model>(HttpStatusCode.Created, <#= _code.Escape(_entity).ToLower() #>);
							string uri = Url.Route(null, new { <#= _codeStringGenerator.ObjectsAssign(_keyProperties, _code.Escape(_entity).ToLower(), string.Empty, false) #> });
							response.Headers.Location = new Uri(Request.RequestUri, uri);
							return response;
						}
					}
				} else {
					return Request.CreateResponse(HttpStatusCode.BadRequest, "No se puede insertar el registro porque ya existe otro con la misma clave. Por favor, rev√≠sela.");
				}
			} else {
				var errors = new Dictionary<string, IEnumerable<string>>();
				foreach (var keyValue in ModelState) {
					errors[keyValue.Key] = keyValue.Value.Errors.Select(e => (!string.IsNullOrWhiteSpace(e.ErrorMessage) ? e.ErrorMessage : (e.Exception != null ? e.Exception.Message : string.Empty)));
				}
				return Request.CreateResponse(HttpStatusCode.BadRequest, errors);
			}
			throw new HttpResponseException(HttpStatusCode.BadRequest);
		} catch (Exception _excepcion) {
			log.Error(_excepcion);
			return Request.CreateResponse(HttpStatusCode.InternalServerError, _excepcion);
		}
	}

	public HttpResponseMessage Put(<#= _codeStringGenerator.ConstructorParameters(_entity, _keyProperties) #>, string cultura, <#= _code.Escape(_entity) #>Model <#= _code.Escape(_entity).ToLower() #>) {
		try {
			if (ModelState.IsValid) {
				if (cultura != Localizacion.CulturaPorDefecto) {
					<#=_code.Escape(_entity) #> _<#=_code.Escape(_entity).ToLower() #> = <#=_code.Escape(_entity).ToLower() #>Repository.GetById(new string[] {}, (p => <#= _codeStringGenerator.CompareProperties(_keyProperties, string.Empty, "p", "&&", "==") #>));
					<#=_code.Escape(_entity) #>Model _<#=_code.Escape(_entity).ToLower() #>PorDefecto = new <#=_code.Escape(_entity) #>Model();
					// Solo funciona el Mapper si se ha configurado el Mapper con Mapper.CreateMap<EmpresaModel, EmpresaModel>(); Se est√° creando en la carpeta mappers.
					_<#=_code.Escape(_entity).ToLower() #>PorDefecto = AutoMapper.Mapper.Map<<#=_code.Escape(_entity) #>Model, <#=_code.Escape(_entity) #>Model>(<#=_code.Escape(_entity).ToLower() #>, _<#=_code.Escape(_entity).ToLower() #>PorDefecto);

<# foreach (EdmProperty _propiedad in _typeMapper.GetSimpleProperties(_typeMapper.GetItemsToGenerate<EntityType>(_itemCollection).Where(e => e.Name == _entity.Name + "_Idioma").First())) { 
		if (_propiedad.Name != "Id" && _propiedad.Name != "Cultura" && _propiedad.Name != "IdRegistro") { #>
					_<#=_code.Escape(_entity).ToLower() #>PorDefecto.<#= _propiedad.Name #> = _<#=_code.Escape(_entity).ToLower() #>.<#= _propiedad.Name #>;
<#	}
	 } #>

					var command = AutoMapper.Mapper.Map<<#= _code.Escape(_entity) #>Model, CreateOrUpdate<#= _code.Escape(_entity) #>Command>(_<#= _code.Escape(_entity).ToLower() #>PorDefecto);
					var result = commandBus.Submit(command);
				} else {
					var command = AutoMapper.Mapper.Map<<#=_code.Escape(_entity) #>Model, CreateOrUpdate<#= _code.Escape(_entity) #>Command>(<#= _code.Escape(_entity).ToLower() #>);
					var result = commandBus.Submit(command);
				}
				<#= _code.Escape(_entity) #>_Idioma _<#= _code.Escape(_entity).ToLower() #>Idioma = <#= _code.Escape(_entity).ToLower() #>_IdiomaRepository.GetMany(t => t.IdRegistro == <#= _code.Escape(_entity).ToLower() #>.Id && t.Cultura == cultura).FirstOrDefault();
				var commandIdioma = AutoMapper.Mapper.Map<<#= _code.Escape(_entity) #>_IdiomaModel, CreateOrUpdate<#= _code.Escape(_entity) #>_IdiomaCommand>(new <#= _code.Escape(_entity) #>_IdiomaModel { Id = (_<#= _code.Escape(_entity).ToLower() #>Idioma != null ? _<#= _code.Escape(_entity).ToLower() #>Idioma.Id : (<#= _typeMapper.GetTypeName(_keyProperties.First().TypeUsage) #>) 0), IdRegistro = <#= _code.Escape(_entity).ToLower() #>.Id, Cultura = cultura<# foreach (EdmProperty _propiedad in _typeMapper.GetSimpleProperties(_typeMapper.GetItemsToGenerate<EntityType>(_itemCollection).Where(e => e.Name == _entity.Name + "_Idioma").First())) {  if (_propiedad.Name != "Id" && _propiedad.Name != "Cultura" && _propiedad.Name != "IdRegistro") { #>, <#= _propiedad.Name #> = <#= _code.Escape(_entity).ToLower() #>.<#= _propiedad.Name #><# } } #> });
				var resultIdioma = commandBus.Submit(commandIdioma);
				return Request.CreateResponse<<#= _code.Escape(_entity) #>Model>(HttpStatusCode.OK, <#= _code.Escape(_entity).ToLower() #>);
			} else {
				var errors = new Dictionary<string, IEnumerable<string>>();
				foreach (var keyValue in ModelState) {
						errors[keyValue.Key] = keyValue.Value.Errors.Select(e => (!string.IsNullOrWhiteSpace(e.ErrorMessage) ? e.ErrorMessage : (e.Exception != null ? e.Exception.Message : string.Empty)));
				}
				return Request.CreateResponse(HttpStatusCode.BadRequest, errors);
			}
			throw new HttpResponseException(HttpStatusCode.BadRequest);
		} catch (Exception _excepcion) {
			log.Error(_excepcion);
			return Request.CreateResponse(HttpStatusCode.InternalServerError, _excepcion);
		}
	}
<# } #>
}
<#
	EndNamespace(_code);
}
_fileManager.Process();

#>