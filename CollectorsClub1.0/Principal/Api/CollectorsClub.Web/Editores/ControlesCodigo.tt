<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ include file="..\\..\\CollectorsClub.Model\\Templates\\Context.Base.ttinclude"#>
<#@ output extension=".ascx.cs"#><#

const string _inputFile = @"..\..\CollectorsClub.EntityFramework\Model.edmx";
string _aplicacion = "CollectorsClub";
Dictionary<string, MetadataGenerador.MetadataEntidad> _metadataEntidades = MetadataGenerador.ObtenerEntidades(_aplicacion);
var _storeMetadata = LoadMetadata(_inputFile);
var _textTransform = DynamicTextTransformation.Create(this);
var _code = new CodeGenerationTools(this);
var _ef = new MetadataTools(this);
//var _itemCollection = new EdmMetadataLoader(_textTransform.Host, _textTransform.Errors).CreateEdmItemCollection(_inputFile);
var _itemCollection = _storeMetadata.EdmItems;
EntityContainer _container = _itemCollection.OfType<EntityContainer>().FirstOrDefault();
var _typeMapper = new TypeMapper(_code, _ef, _container, _storeMetadata, _textTransform.Errors);
var	_fileManager = EntityFrameworkTemplateFileManager.Create(this);
var _codeStringGenerator = new CodeStringGenerator(_code, _typeMapper, _ef);
var _codeJSGenerator = new CodeJSGenerator(_code, _typeMapper, _ef);

if (!_typeMapper.VerifyCaseInsensitiveTypeUniqueness(_typeMapper.GetAllGlobalItems(_itemCollection), _inputFile)) {
	return string.Empty;
}

MetadataGenerador.IncluirEntidadesNoExistentesEnFramework(_metadataEntidades, _typeMapper.GetItemsToGenerate<EntityType>(_itemCollection).ToList(), _typeMapper);
foreach (var _entity in _typeMapper.GetItemsToGenerate<EntityType>(_itemCollection)) {
  _fileManager.StartNewFile(_entity.Name + "EditorView.ascx.cs"); 
  IEnumerable<EdmProperty> _propertiesWithDefaultValues = _typeMapper.GetPropertiesWithDefaultValues(_entity);
  IEnumerable<NavigationProperty> _collectionNavigationProperties = _typeMapper.GetCollectionNavigationProperties(_entity);
  IEnumerable<NavigationProperty> _navigationProperties = _typeMapper.GetNavigationProperties(_entity);
  IEnumerable<EdmProperty> _complexProperties = _typeMapper.GetComplexProperties(_entity);
  IEnumerable<EdmProperty> _simpleProperties = _typeMapper.GetSimpleProperties(_entity);
  IEnumerable<EdmMember> _properties = _typeMapper.GetProperties(_entity);
	#>

using System;
using System.Configuration;
using System.IO;
using System.Web.UI;
using CollectorsClub.Core;
using DotNetNuke.Services.Exceptions;
using DotNetNuke.Services.Localization;
using DotNetNuke.UI.Skins;
using DotNetNuke.UI.Skins.Controls;

namespace CollectorsClub.Modules.Editores.Editor<#=_code.Escape(_entity)#> {

	partial class View : CoreModule {

		#region Eventos

		#region Eventos del ciclo de vida
		protected void Page_Init(object sender, EventArgs e) {
			Page.ViewStateMode = System.Web.UI.ViewStateMode.Disabled;
			Session["DojoCargado"] = false;
		}
		
		protected void Page_Load(object sender, EventArgs e) {
			try {
				// OLL: Revisar si es necesario, en teoría el módulo solo se ve si está autenticado, quizás es por si pierde la sesión
				if (!Request.IsAuthenticated) {
					// Do not redirect but hide the content of the module and display a message.
					Container.Visible = false;
					Skin.AddModuleMessage(this, Localization.GetString("ContentNotAvailable", LocalResourceFile), ModuleMessage.ModuleMessageType.YellowWarning);
					return;
				}

				//ServicesFramework.Instance.RequestAjaxAntiForgerySupport();
			} catch (Exception Excepcion) {
				Exceptions.ProcessModuleLoadException(this, Excepcion);
			}
		}

		protected void Page_PreRender(object sender, EventArgs e) {
			if ((bool)Session["DojoCargado"] == false) {
				Page.Header.Controls.AddAt(0, new LiteralControl("<script type=\"text/javascript\">\nvar _urlWebAPI = '" + ConfigurationManager.AppSettings["UrlWebAPI"] + "'\n" + File.ReadAllText(Server.MapPath("~/js/AMD/dojoConfig.js")) + "</script>\n" +
								"<script src=\"~/Resources/Shared/scripts/dojo/dojo/dojo.js\" data-dojo-config=\"async: true\"></script>\n" +
								"<script type=\"text/javascript\">\n" + File.ReadAllText(Server.MapPath("~/js/AMD/useConfig.js")) + "</script>\n"));
				Session["DojoCargado"] = true;
			}
		}
		#endregion Eventos del ciclo de vida

		#endregion Eventos
	}
}
<#
}

_fileManager.Process();
#>